// Code generated by go-swagger; DO NOT EDIT.

package call

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAppsAppCallsParams creates a new GetAppsAppCallsParams object
// with the default values initialized.
func NewGetAppsAppCallsParams() *GetAppsAppCallsParams {
	var ()
	return &GetAppsAppCallsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAppsAppCallsParamsWithTimeout creates a new GetAppsAppCallsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAppsAppCallsParamsWithTimeout(timeout time.Duration) *GetAppsAppCallsParams {
	var ()
	return &GetAppsAppCallsParams{

		timeout: timeout,
	}
}

// NewGetAppsAppCallsParamsWithContext creates a new GetAppsAppCallsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAppsAppCallsParamsWithContext(ctx context.Context) *GetAppsAppCallsParams {
	var ()
	return &GetAppsAppCallsParams{

		Context: ctx,
	}
}

// NewGetAppsAppCallsParamsWithHTTPClient creates a new GetAppsAppCallsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAppsAppCallsParamsWithHTTPClient(client *http.Client) *GetAppsAppCallsParams {
	var ()
	return &GetAppsAppCallsParams{
		HTTPClient: client,
	}
}

/*GetAppsAppCallsParams contains all the parameters to send to the API endpoint
for the get apps app calls operation typically these are written to a http.Request
*/
type GetAppsAppCallsParams struct {

	/*App
	  App name.

	*/
	App string
	/*Cursor
	  Cursor from previous response.next_cursor to begin results after, if any.

	*/
	Cursor *string
	/*FromTime
	  Unix timestamp in seconds, of call.created_at to begin the results at, default 0.

	*/
	FromTime *int64
	/*Path
	  Route path to match, exact.

	*/
	Path *string
	/*PerPage
	  Number of results to return, defaults to 30. Max of 100.

	*/
	PerPage *int64
	/*ToTime
	  Unix timestamp in seconds, of call.created_at to end the results at, defaults to latest.

	*/
	ToTime *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get apps app calls params
func (o *GetAppsAppCallsParams) WithTimeout(timeout time.Duration) *GetAppsAppCallsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get apps app calls params
func (o *GetAppsAppCallsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get apps app calls params
func (o *GetAppsAppCallsParams) WithContext(ctx context.Context) *GetAppsAppCallsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get apps app calls params
func (o *GetAppsAppCallsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get apps app calls params
func (o *GetAppsAppCallsParams) WithHTTPClient(client *http.Client) *GetAppsAppCallsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get apps app calls params
func (o *GetAppsAppCallsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApp adds the app to the get apps app calls params
func (o *GetAppsAppCallsParams) WithApp(app string) *GetAppsAppCallsParams {
	o.SetApp(app)
	return o
}

// SetApp adds the app to the get apps app calls params
func (o *GetAppsAppCallsParams) SetApp(app string) {
	o.App = app
}

// WithCursor adds the cursor to the get apps app calls params
func (o *GetAppsAppCallsParams) WithCursor(cursor *string) *GetAppsAppCallsParams {
	o.SetCursor(cursor)
	return o
}

// SetCursor adds the cursor to the get apps app calls params
func (o *GetAppsAppCallsParams) SetCursor(cursor *string) {
	o.Cursor = cursor
}

// WithFromTime adds the fromTime to the get apps app calls params
func (o *GetAppsAppCallsParams) WithFromTime(fromTime *int64) *GetAppsAppCallsParams {
	o.SetFromTime(fromTime)
	return o
}

// SetFromTime adds the fromTime to the get apps app calls params
func (o *GetAppsAppCallsParams) SetFromTime(fromTime *int64) {
	o.FromTime = fromTime
}

// WithPath adds the path to the get apps app calls params
func (o *GetAppsAppCallsParams) WithPath(path *string) *GetAppsAppCallsParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the get apps app calls params
func (o *GetAppsAppCallsParams) SetPath(path *string) {
	o.Path = path
}

// WithPerPage adds the perPage to the get apps app calls params
func (o *GetAppsAppCallsParams) WithPerPage(perPage *int64) *GetAppsAppCallsParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the get apps app calls params
func (o *GetAppsAppCallsParams) SetPerPage(perPage *int64) {
	o.PerPage = perPage
}

// WithToTime adds the toTime to the get apps app calls params
func (o *GetAppsAppCallsParams) WithToTime(toTime *int64) *GetAppsAppCallsParams {
	o.SetToTime(toTime)
	return o
}

// SetToTime adds the toTime to the get apps app calls params
func (o *GetAppsAppCallsParams) SetToTime(toTime *int64) {
	o.ToTime = toTime
}

// WriteToRequest writes these params to a swagger request
func (o *GetAppsAppCallsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param app
	if err := r.SetPathParam("app", o.App); err != nil {
		return err
	}

	if o.Cursor != nil {

		// query param cursor
		var qrCursor string
		if o.Cursor != nil {
			qrCursor = *o.Cursor
		}
		qCursor := qrCursor
		if qCursor != "" {
			if err := r.SetQueryParam("cursor", qCursor); err != nil {
				return err
			}
		}

	}

	if o.FromTime != nil {

		// query param from_time
		var qrFromTime int64
		if o.FromTime != nil {
			qrFromTime = *o.FromTime
		}
		qFromTime := swag.FormatInt64(qrFromTime)
		if qFromTime != "" {
			if err := r.SetQueryParam("from_time", qFromTime); err != nil {
				return err
			}
		}

	}

	if o.Path != nil {

		// query param path
		var qrPath string
		if o.Path != nil {
			qrPath = *o.Path
		}
		qPath := qrPath
		if qPath != "" {
			if err := r.SetQueryParam("path", qPath); err != nil {
				return err
			}
		}

	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int64
		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {
			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}

	}

	if o.ToTime != nil {

		// query param to_time
		var qrToTime int64
		if o.ToTime != nil {
			qrToTime = *o.ToTime
		}
		qToTime := swag.FormatInt64(qrToTime)
		if qToTime != "" {
			if err := r.SetQueryParam("to_time", qToTime); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
