// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Task task
// swagger:model Task

type Task struct {
	NewTask

	// Time when task completed, whether it was successul or failed. Always in UTC.
	CompletedAt strfmt.DateTime `json:"completed_at,omitempty"`

	// Time when task was submitted. Always in UTC.
	// Read Only: true
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// Env vars for the task. Comes from the ones set on the Group.
	EnvVars map[string]string `json:"env_vars,omitempty"`

	// The error message, if status is 'error'. This is errors due to things outside the task itself. Errors from user code will be found in the log.
	Error string `json:"error,omitempty"`

	// Group this task belongs to.
	// Read Only: true
	GroupName string `json:"group_name,omitempty"`

	// Machine usable reason for task being in this state.
	// Valid values for error status are `timeout | killed | bad_exit`.
	// Valid values for cancelled status are `client_request`.
	// For everything else, this is undefined.
	//
	Reason string `json:"reason,omitempty"`

	// If this field is set, then this task was retried by the task referenced in this field.
	// Read Only: true
	RetryAt string `json:"retry_at,omitempty"`

	// If this field is set, then this task is a retry of the ID in this field.
	// Read Only: true
	RetryOf string `json:"retry_of,omitempty"`

	// Time when task started execution. Always in UTC.
	StartedAt strfmt.DateTime `json:"started_at,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Task) UnmarshalJSON(raw []byte) error {

	var aO0 NewTask
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.NewTask = aO0

	var data struct {
		CompletedAt strfmt.DateTime `json:"completed_at,omitempty"`

		CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

		EnvVars map[string]string `json:"env_vars,omitempty"`

		Error string `json:"error,omitempty"`

		GroupName string `json:"group_name,omitempty"`

		Reason string `json:"reason,omitempty"`

		RetryAt string `json:"retry_at,omitempty"`

		RetryOf string `json:"retry_of,omitempty"`

		StartedAt strfmt.DateTime `json:"started_at,omitempty"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.CompletedAt = data.CompletedAt

	m.CreatedAt = data.CreatedAt

	m.EnvVars = data.EnvVars

	m.Error = data.Error

	m.GroupName = data.GroupName

	m.Reason = data.Reason

	m.RetryAt = data.RetryAt

	m.RetryOf = data.RetryOf

	m.StartedAt = data.StartedAt

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Task) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.NewTask)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		CompletedAt strfmt.DateTime `json:"completed_at,omitempty"`

		CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

		EnvVars map[string]string `json:"env_vars,omitempty"`

		Error string `json:"error,omitempty"`

		GroupName string `json:"group_name,omitempty"`

		Reason string `json:"reason,omitempty"`

		RetryAt string `json:"retry_at,omitempty"`

		RetryOf string `json:"retry_of,omitempty"`

		StartedAt strfmt.DateTime `json:"started_at,omitempty"`
	}

	data.CompletedAt = m.CompletedAt

	data.CreatedAt = m.CreatedAt

	data.EnvVars = m.EnvVars

	data.Error = m.Error

	data.GroupName = m.GroupName

	data.Reason = m.Reason

	data.RetryAt = m.RetryAt

	data.RetryOf = m.RetryOf

	data.StartedAt = m.StartedAt

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this task
func (m *Task) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.NewTask.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var taskTypeReasonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["timeout","killed","bad_exit","client_request"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskTypeReasonPropEnum = append(taskTypeReasonPropEnum, v)
	}
}

// property enum
func (m *Task) validateReasonEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, taskTypeReasonPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Task) validateReason(formats strfmt.Registry) error {

	if swag.IsZero(m.Reason) { // not required
		return nil
	}

	// value enum
	if err := m.validateReasonEnum("reason", "body", m.Reason); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Task) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Task) UnmarshalBinary(b []byte) error {
	var res Task
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
