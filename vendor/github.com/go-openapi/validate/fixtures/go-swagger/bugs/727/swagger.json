{
  "swagger": "2.0",
  "info": {
    "version": "v3",
    "title": "Microsoft Bot Connector API - v3.0",
    "description": "﻿The Bot Connector REST API allows your bot to send and receive messages to channels configured in the\r\n[Bot Framework Developer Portal](https://dev.botframework.com). The Connector service uses industry-standard REST\r\nand JSON over HTTPS.\r\n\r\nClient libraries for this REST API are available. See below for a list.\r\n\r\nMany bots will use both the Bot Connector REST API and the associated [Bot State REST API](/en-us/restapi/state). The\r\nBot State REST API allows a bot to store and retrieve state associated with users and conversations.\r\n\r\nAuthentication for both the Bot Connector and Bot State REST APIs is accomplished with JWT Bearer tokens, and is\r\ndescribed in detail in the [Connector Authentication](/en-us/restapi/authentication) document.\r\n\r\n# Client Libraries for the Bot Connector REST API\r\n\r\n* [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)\r\n* [Bot Builder for Node.js](/en-us/node/builder/overview/)\r\n* Generate your own from the [Connector API Swagger file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector/Swagger/ConnectorAPI.json)\r\n\r\n© 2016 Microsoft",
    "termsOfService": "https://www.microsoft.com/en-us/legal/intellectualproperty/copyright/default.aspx",
    "contact": {
      "name": "Bot Framework",
      "url": "https://botframework.com",
      "email": "botframework@microsoft.com"
    },
    "license": {
      "name": "The MIT License (MIT)",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "host": "api.botframework.com",
  "schemes": [ "https" ],
  "paths": {
    "/v3/attachments/{attachmentId}": {
      "get": {
        "tags": [ "Attachments" ],
        "summary": "GetAttachmentInfo",
        "description": "Get AttachmentInfo structure describing the attachment views",
        "operationId": "Attachments_GetAttachmentInfo",
        "consumes": [],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "attachmentId",
            "in": "path",
            "description": "attachment id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "﻿An attachmentInfo object is returned which describes the:\r\n* type of the attachment\r\n* name of the attachment\r\n\r\n\r\nand an array of views:\r\n* Size - size of the object\r\n* ViewId - View Id which can be used to fetch a variation on the content (ex: original or thumbnail)",
            "schema": { "$ref": "#/definitions/AttachmentInfo" }
          },
          "400": {
            "description": "The request was malformed or otherwise incorrect. Inspect the message for a more detailed description.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "401": { "description": "﻿The bot is not authorized to make this request. Please check your Microsoft App ID and Microsoft App password. " },
          "403": { "description": "﻿The request was a valid request, but the server is refusing to respond to it. The user might be logged in but does not have the necessary permissions for the resource." },
          "404": {
            "description": "﻿The resource was not found.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "500": {
            "description": "﻿An internal server has occurred. Inspect the message for a more detailed description.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "503": {
            "description": "﻿The service you are trying to communciate with is unavailable.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        },
        "deprecated": false
      }
    },
    "/v3/attachments/{attachmentId}/views/{viewId}": {
      "get": {
        "tags": [ "Attachments" ],
        "summary": "GetAttachment",
        "description": "Get the named view as binary content",
        "operationId": "Attachments_GetAttachment",
        "consumes": [],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "attachmentId",
            "in": "path",
            "description": "attachment id",
            "required": true,
            "type": "string"
          },
          {
            "name": "viewId",
            "in": "path",
            "description": "View id from attachmentInfo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "﻿An array of bytes which represent the content.",
            "schema": {
              "type": "file"
            }
          },
          "301": { "description": "﻿The Location header describes where the content is now." },
          "302": { "description": "﻿The Location header describes where the content is now." },
          "400": {
            "description": "The request was malformed or otherwise incorrect. Inspect the message for a more detailed description.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "401": { "description": "﻿The bot is not authorized to make this request. Please check your Microsoft App ID and Microsoft App password. " },
          "403": { "description": "﻿The request was a valid request, but the server is refusing to respond to it. The user might be logged in but does not have the necessary permissions for the resource." },
          "404": {
            "description": "﻿The resource was not found.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "500": {
            "description": "﻿An internal server has occurred. Inspect the message for a more detailed description.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "503": {
            "description": "﻿The service you are trying to communciate with is unavailable.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        },
        "deprecated": false
      }
    },
    "/v3/conversations": {
      "post": {
        "tags": [ "Conversations" ],
        "summary": "CreateConversation",
        "description": "Create a new Conversation.\r\n\r\nPOST to this method with a\r\n* Bot being the bot creating the conversation\r\n* IsGroup set to true if this is not a direct message (default is false)\r\n* Members array contining the members you want to have be in the conversation.\r\n\r\nThe return value is a ResourceResponse which contains a conversation id which is suitable for use\r\nin the message payload and REST API uris.\r\n\r\nMost channels only support the semantics of bots initiating a direct message conversation.  An example of how to do that would be:\r\n\r\n```\r\nvar resource = await connector.conversations.CreateConversation(new ConversationParameters(){ Bot = bot, members = new ChannelAccount[] { new ChannelAccount(\"user1\") } );\r\nawait connect.Conversations.SendToConversationAsync(resource.Id, new Activity() ... ) ;\r\n\r\n```",
        "operationId": "Conversations_CreateConversation",
        "consumes": [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "parameters",
            "in": "body",
            "description": "Parameters to create the conversation from",
            "required": true,
            "schema": { "$ref": "#/definitions/ConversationParameters" }
          }
        ],
        "responses": {
          "200": {
            "description": "﻿An object will be returned containing the ID for the resource.",
            "schema": { "$ref": "#/definitions/ResourceResponse" }
          },
          "201": {
            "description": "﻿A ResourceResponse object will be returned containing the ID for the resource.",
            "schema": { "$ref": "#/definitions/ResourceResponse" }
          },
          "202": {
            "description": "﻿An object will be returned containing the ID for the resource.",
            "schema": { "$ref": "#/definitions/ResourceResponse" }
          },
          "400": {
            "description": "The request was malformed or otherwise incorrect. Inspect the message for a more detailed description.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "401": { "description": "﻿The bot is not authorized to make this request. Please check your Microsoft App ID and Microsoft App password. " },
          "403": { "description": "﻿The request was a valid request, but the server is refusing to respond to it. The user might be logged in but does not have the necessary permissions for the resource." },
          "404": {
            "description": "﻿The resource was not found.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "405": {
            "description": "﻿The method and URI you are trying to use is not allowed on this service.  For example, not all services support the DELETE or PUT verbs on an activity URI.  ",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "500": {
            "description": "﻿An internal server has occurred. Inspect the message for a more detailed description.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "503": {
            "description": "﻿The service you are trying to communciate with is unavailable.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        },
        "deprecated": false
      }
    },
    "/v3/conversations/{conversationId}/activities": {
      "post": {
        "tags": [ "Conversations" ],
        "summary": "SendToConversation",
        "description": "This method allows you to send an activity to the end of a conversation.\r\n\r\nThis is slightly different from ReplyToActivity().\r\n* SendToConverstion(conversationId) - will append the activity to the end of the conversation according to the timestamp or semantics of the channel.\r\n* ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply to another activity, if the channel supports it. If the channel does not support nested replies, ReplyToActivity falls back to SendToConversation.\r\n\r\nUse ReplyToActivity when replying to a specific activity in the conversation.\r\n\r\nUse SendToConversation in all other cases.",
        "operationId": "Conversations_SendToConversation",
        "consumes": [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces": [ "application/json", "text/json" ],
        "parameters": [
          {
            "name": "activity",
            "in": "body",
            "description": "Activity to send",
            "required": true,
            "schema": { "$ref": "#/definitions/Activity" }
          },
          {
            "name": "conversationId",
            "in": "path",
            "description": "Conversation ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "﻿An object will be returned containing the ID for the resource.",
            "schema": { "$ref": "#/definitions/ResourceResponse" }
          },
          "201": {
            "description": "﻿A ResourceResponse object will be returned containing the ID for the resource.",
            "schema": { "$ref": "#/definitions/ResourceResponse" }
          },
          "202": {
            "description": "﻿An object will be returned containing the ID for the resource.",
            "schema": { "$ref": "#/definitions/ResourceResponse" }
          },
          "400": {
            "description": "The request was malformed or otherwise incorrect. Inspect the message for a more detailed description.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "401": { "description": "﻿The bot is not authorized to make this request. Please check your Microsoft App ID and Microsoft App password. " },
          "403": { "description": "﻿The request was a valid request, but the server is refusing to respond to it. The user might be logged in but does not have the necessary permissions for the resource." },
          "404": {
            "description": "﻿The resource was not found.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "500": {
            "description": "﻿An internal server has occurred. Inspect the message for a more detailed description.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "503": {
            "description": "﻿The service you are trying to communciate with is unavailable.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        },
        "deprecated": false
      }
    },
    "/v3/conversations/{conversationId}/activities/{activityId}": {
      "put": {
        "tags": [ "Conversations" ],
        "summary": "UpdateActivity",
        "description": "Edit an existing activity.\r\n\r\nSome channels allow you to edit an existing activity to reflect the new state of a bot conversation.\r\n\r\nFor example, you can remove buttons after someone has clicked \"Approve\" button.",
        "operationId": "Conversations_UpdateActivity",
        "consumes": [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces": [ "application/json", "text/json" ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "Conversation ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "activityId",
            "in": "path",
            "description": "activityId to update",
            "required": true,
            "type": "string"
          },
          {
            "name": "activity",
            "in": "body",
            "description": "replacement Activity",
            "required": true,
            "schema": { "$ref": "#/definitions/Activity" }
          }
        ],
        "responses": {
          "200": {
            "description": "﻿An object will be returned containing the ID for the resource.",
            "schema": { "$ref": "#/definitions/ResourceResponse" }
          },
          "201": {
            "description": "﻿A ResourceResponse object will be returned containing the ID for the resource.",
            "schema": { "$ref": "#/definitions/ResourceResponse" }
          },
          "202": {
            "description": "﻿An object will be returned containing the ID for the resource.",
            "schema": { "$ref": "#/definitions/ResourceResponse" }
          },
          "400": {
            "description": "The request was malformed or otherwise incorrect. Inspect the message for a more detailed description.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "401": { "description": "﻿The bot is not authorized to make this request. Please check your Microsoft App ID and Microsoft App password. " },
          "403": { "description": "﻿The request was a valid request, but the server is refusing to respond to it. The user might be logged in but does not have the necessary permissions for the resource." },
          "404": {
            "description": "﻿The resource was not found.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "405": {
            "description": "﻿The method and URI you are trying to use is not allowed on this service.  For example, not all services support the DELETE or PUT verbs on an activity URI.  ",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "500": {
            "description": "﻿An internal server has occurred. Inspect the message for a more detailed description.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "503": {
            "description": "﻿The service you are trying to communciate with is unavailable.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [ "Conversations" ],
        "summary": "ReplyToActivity",
        "description": "This method allows you to reply to an activity.\r\n\r\nThis is slightly different from SendToConversation().\r\n* SendToConverstion(conversationId) - will append the activity to the end of the conversation according to the timestamp or semantics of the channel.\r\n* ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply to another activity, if the channel supports it. If the channel does not support nested replies, ReplyToActivity falls back to SendToConversation.\r\n\r\nUse ReplyToActivity when replying to a specific activity in the conversation.\r\n\r\nUse SendToConversation in all other cases.",
        "operationId": "Conversations_ReplyToActivity",
        "consumes": [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces": [ "application/json", "text/json" ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "Conversation ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "activityId",
            "in": "path",
            "description": "activityId the reply is to (OPTIONAL)",
            "required": true,
            "type": "string"
          },
          {
            "name": "activity",
            "in": "body",
            "description": "Activity to send",
            "required": true,
            "schema": { "$ref": "#/definitions/Activity" }
          }
        ],
        "responses": {
          "200": {
            "description": "﻿An object will be returned containing the ID for the resource.",
            "schema": { "$ref": "#/definitions/ResourceResponse" }
          },
          "201": {
            "description": "﻿A ResourceResponse object will be returned containing the ID for the resource.",
            "schema": { "$ref": "#/definitions/ResourceResponse" }
          },
          "202": {
            "description": "﻿An object will be returned containing the ID for the resource.",
            "schema": { "$ref": "#/definitions/ResourceResponse" }
          },
          "400": {
            "description": "The request was malformed or otherwise incorrect. Inspect the message for a more detailed description.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "401": { "description": "﻿The bot is not authorized to make this request. Please check your Microsoft App ID and Microsoft App password. " },
          "403": { "description": "﻿The request was a valid request, but the server is refusing to respond to it. The user might be logged in but does not have the necessary permissions for the resource." },
          "404": {
            "description": "﻿The resource was not found.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "500": {
            "description": "﻿An internal server has occurred. Inspect the message for a more detailed description.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "503": {
            "description": "﻿The service you are trying to communciate with is unavailable.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [ "Conversations" ],
        "summary": "DeleteActivity",
        "description": "Delete an existing activity.\r\n\r\nSome channels allow you to delete an existing activity, and if successful this method will remove the specified activity.",
        "operationId": "Conversations_DeleteActivity",
        "consumes": [],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "Conversation ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "activityId",
            "in": "path",
            "description": "activityId to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": { "description": "﻿The operation succeeded, there is no response." },
          "202": { "description": "﻿The request has been accepted for processing, but the processing has not been completed" },
          "400": {
            "description": "The request was malformed or otherwise incorrect. Inspect the message for a more detailed description.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "401": { "description": "﻿The bot is not authorized to make this request. Please check your Microsoft App ID and Microsoft App password. " },
          "403": { "description": "﻿The request was a valid request, but the server is refusing to respond to it. The user might be logged in but does not have the necessary permissions for the resource." },
          "404": {
            "description": "﻿The resource was not found.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "405": {
            "description": "﻿The method and URI you are trying to use is not allowed on this service.  For example, not all services support the DELETE or PUT verbs on an activity URI.  ",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "500": {
            "description": "﻿An internal server has occurred. Inspect the message for a more detailed description.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "503": {
            "description": "﻿The service you are trying to communciate with is unavailable.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        },
        "deprecated": false
      }
    },
    "/v3/conversations/{conversationId}/members": {
      "get": {
        "tags": [ "Conversations" ],
        "summary": "GetConversationMembers",
        "description": "Enumerate the members of a converstion. \r\n\r\nThis REST API takes a ConversationId and returns an array of ChannelAccount objects representing the members of the conversation.",
        "operationId": "Conversations_GetConversationMembers",
        "consumes": [],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "Conversation ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "﻿An array of ChannelAccount objects",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/ChannelAccount" }
            }
          },
          "400": {
            "description": "The request was malformed or otherwise incorrect. Inspect the message for a more detailed description.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "401": { "description": "﻿The bot is not authorized to make this request. Please check your Microsoft App ID and Microsoft App password. " },
          "403": { "description": "﻿The request was a valid request, but the server is refusing to respond to it. The user might be logged in but does not have the necessary permissions for the resource." },
          "404": {
            "description": "﻿The resource was not found.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "405": {
            "description": "﻿The method and URI you are trying to use is not allowed on this service.  For example, not all services support the DELETE or PUT verbs on an activity URI.  ",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "500": {
            "description": "﻿An internal server has occurred. Inspect the message for a more detailed description.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "503": {
            "description": "﻿The service you are trying to communciate with is unavailable.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        },
        "deprecated": false
      }
    },
    "/v3/conversations/{conversationId}/activities/{activityId}/members": {
      "get": {
        "tags": [ "Conversations" ],
        "summary": "GetActivityMembers",
        "description": "Enumerate the members of an activity. \r\n\r\nThis REST API takes a ConversationId and a ActivityId, returning an array of ChannelAccount objects representing the members of the particular activity in the conversation.",
        "operationId": "Conversations_GetActivityMembers",
        "consumes": [],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "Conversation ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "activityId",
            "in": "path",
            "description": "Activity ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "﻿An array of ChannelAccount objects",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/ChannelAccount" }
            }
          },
          "400": {
            "description": "The request was malformed or otherwise incorrect. Inspect the message for a more detailed description.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "401": { "description": "﻿The bot is not authorized to make this request. Please check your Microsoft App ID and Microsoft App password. " },
          "403": { "description": "﻿The request was a valid request, but the server is refusing to respond to it. The user might be logged in but does not have the necessary permissions for the resource." },
          "404": {
            "description": "﻿The resource was not found.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "405": {
            "description": "﻿The method and URI you are trying to use is not allowed on this service.  For example, not all services support the DELETE or PUT verbs on an activity URI.  ",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "500": {
            "description": "﻿An internal server has occurred. Inspect the message for a more detailed description.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "503": {
            "description": "﻿The service you are trying to communciate with is unavailable.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        },
        "deprecated": false
      }
    },
    "/v3/conversations/{conversationId}/attachments": {
      "post": {
        "tags": [ "Conversations" ],
        "summary": "UploadAttachment",
        "description": "Upload an attachment directly into a channel's blob storage.\r\n\r\nThis is useful because it allows you to store data in a compliant store when dealing with enterprises.\r\n\r\nThe response is a ResourceResponse which contains an AttachmentId which is suitable for using with the attachments API.",
        "operationId": "Conversations_UploadAttachment",
        "consumes": [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces": [ "application/json", "text/json" ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "Conversation ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "attachmentUpload",
            "in": "body",
            "description": "Attachment data",
            "required": true,
            "schema": { "$ref": "#/definitions/AttachmentData" }
          }
        ],
        "responses": {
          "200": {
            "description": "﻿An object will be returned containing the ID for the resource.",
            "schema": { "$ref": "#/definitions/ResourceResponse" }
          },
          "201": {
            "description": "﻿A ResourceResponse object will be returned containing the ID for the resource.",
            "schema": { "$ref": "#/definitions/ResourceResponse" }
          },
          "202": {
            "description": "﻿An object will be returned containing the ID for the resource.",
            "schema": { "$ref": "#/definitions/ResourceResponse" }
          },
          "400": {
            "description": "The request was malformed or otherwise incorrect. Inspect the message for a more detailed description.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "401": { "description": "﻿The bot is not authorized to make this request. Please check your Microsoft App ID and Microsoft App password. " },
          "403": { "description": "﻿The request was a valid request, but the server is refusing to respond to it. The user might be logged in but does not have the necessary permissions for the resource." },
          "404": {
            "description": "﻿The resource was not found.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "405": {
            "description": "﻿The method and URI you are trying to use is not allowed on this service.  For example, not all services support the DELETE or PUT verbs on an activity URI.  ",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "500": {
            "description": "﻿An internal server has occurred. Inspect the message for a more detailed description.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "503": {
            "description": "﻿The service you are trying to communciate with is unavailable.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        },
        "deprecated": false
      }
    }
  },
  "definitions": {
    "AttachmentInfo": {
      "description": "Metdata for an attachment",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the attachment",
          "type": "string"
        },
        "type": {
          "description": "ContentType of the attachment",
          "type": "string"
        },
        "views": {
          "description": "attachment views",
          "type": "array",
          "items": { "$ref": "#/definitions/AttachmentView" }
        }
      }
    },
    "AttachmentView": {
      "description": "Attachment View name and size",
      "type": "object",
      "properties": {
        "viewId": {
          "description": "content type of the attachmnet",
          "type": "string"
        },
        "size": {
          "format": "int32",
          "description": "Name of the attachment",
          "type": "integer"
        }
      }
    },
    "ErrorResponse": {
      "description": "An HTTP API response",
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error",
          "description": "Error message"
        }
      }
    },
    "Error": {
      "description": "Object representing error information",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code",
          "type": "string"
        },
        "message": {
          "description": "Error message",
          "type": "string"
        }
      }
    },
    "ConversationParameters": {
      "description": "Parameters for creating a new conversation",
      "type": "object",
      "properties": {
        "isGroup": {
          "description": "IsGroup",
          "type": "boolean"
        },
        "bot": {
          "$ref": "#/definitions/ChannelAccount",
          "description": "The bot address for this conversation"
        },
        "members": {
          "description": "Members to add to the conversation",
          "type": "array",
          "items": { "$ref": "#/definitions/ChannelAccount" }
        },
        "topicName": {
          "description": "(Optional) Topic of the conversation (if supported by the channel)",
          "type": "string"
        }
      }
    },
    "ChannelAccount": {
      "description": "Channel account information needed to route a message",
      "type": "object",
      "properties": {
        "id": {
          "description": "Channel id for the user or bot on this channel (Example: joe@smith.com, or @joesmith or 123456)",
          "type": "string"
        },
        "name": {
          "description": "Display friendly name",
          "type": "string"
        }
      }
    },
    "Object": {
      "type": "object",
      "properties": {}
    },
    "ResourceResponse": {
      "description": "A response containing a resource ID",
      "type": "object",
      "properties": {
        "id": {
          "description": "Id of the resource",
          "type": "string"
        }
      }
    },
    "Activity": {
      "description": "An Activity is the basic communication type for the Bot Framework 3.0 protocol",
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of the activity [message|contactRelationUpdate|converationUpdate|typing]",
          "type": "string"
        },
        "id": {
          "description": "Id for the activity",
          "type": "string"
        },
        "timestamp": {
          "format": "date-time",
          "description": "UTC Time when message was sent (Set by service)",
          "type": "string"
        },
        "localTimestamp": {
          "format": "date-time",
          "description": "Local time when message was sent (set by client Ex: 2016-09-23T13:07:49.4714686-07:00)",
          "type": "string"
        },
        "serviceUrl": {
          "description": "Service endpoint",
          "type": "string"
        },
        "channelId": {
          "description": "ChannelId the activity was on",
          "type": "string"
        },
        "from": {
          "$ref": "#/definitions/ChannelAccount",
          "description": "Sender address"
        },
        "conversation": {
          "$ref": "#/definitions/ConversationAccount",
          "description": "Conversation"
        },
        "recipient": {
          "$ref": "#/definitions/ChannelAccount",
          "description": "(Outbound to bot only) Bot's address that received the message"
        },
        "textFormat": {
          "description": "Format of text fields [plain|markdown] Default:markdown",
          "type": "string"
        },
        "attachmentLayout": {
          "description": "AttachmentLayout - hint for how to deal with multiple attachments Values: [list|carousel] Default:list",
          "type": "string"
        },
        "membersAdded": {
          "description": "Array of address added",
          "type": "array",
          "items": { "$ref": "#/definitions/ChannelAccount" }
        },
        "membersRemoved": {
          "description": "Array of addresses removed",
          "type": "array",
          "items": { "$ref": "#/definitions/ChannelAccount" }
        },
        "topicName": {
          "description": "Conversations new topic name",
          "type": "string"
        },
        "historyDisclosed": {
          "description": "the previous history of the channel was disclosed",
          "type": "boolean"
        },
        "locale": {
          "description": "The language code of the Text field",
          "type": "string"
        },
        "text": {
          "description": "Content for the message",
          "type": "string"
        },
        "summary": {
          "description": "Text to display if you can't render cards",
          "type": "string"
        },
        "attachments": {
          "description": "Attachments",
          "type": "array",
          "items": { "$ref": "#/definitions/Attachment" }
        },
        "entities": {
          "description": "Collection of Entity objects, each of which contains metadata about this activity. Each Entity object is typed.",
          "type": "array",
          "items": { "$ref": "#/definitions/Entity" }
        },
        "channelData": {
          "$ref": "#/definitions/Object",
          "description": "Channel specific payload"
        },
        "action": {
          "description": "ContactAdded/Removed action",
          "type": "string"
        },
        "replyToId": {
          "description": "the original id this message is a response to",
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/Object",
          "description": "Open ended value"
        }
      }
    },
    "ConversationAccount": {
      "description": "Channel account information for a conversation",
      "type": "object",
      "properties": {
        "isGroup": {
          "description": "Is this a reference to a group",
          "type": "boolean"
        },
        "id": {
          "description": "Channel id for the user or bot on this channel (Example: joe@smith.com, or @joesmith or 123456)",
          "type": "string"
        },
        "name": {
          "description": "Display friendly name",
          "type": "string"
        }
      }
    },
    "Attachment": {
      "description": "An attachment within an activity",
      "type": "object",
      "properties": {
        "contentType": {
          "description": "mimetype/Contenttype for the file",
          "type": "string"
        },
        "contentUrl": {
          "description": "Content Url",
          "type": "string"
        },
        "content": {
          "$ref": "#/definitions/Object",
          "description": "Embedded content"
        },
        "name": {
          "description": "(OPTIONAL) The name of the attachment",
          "type": "string"
        },
        "thumbnailUrl": {
          "description": "(OPTIONAL) Thumbnail associated with attachment",
          "type": "string"
        }
      }
    },
    "Entity": {
      "description": "Object of schema.org types",
      "type": "object",
      "properties": {
        "type": {
          "description": "Entity Type (typically from schema.org types)",
          "type": "string"
        }
      }
    },
    "AttachmentData": {
      "description": "Attachment data",
      "type": "object",
      "properties": {
        "type": {
          "description": "content type of the attachmnet",
          "type": "string"
        },
        "name": {
          "description": "Name of the attachment",
          "type": "string"
        },
        "originalBase64": {
          "format": "byte",
          "description": "original content",
          "type": "string"
        },
        "thumbnailBase64": {
          "format": "byte",
          "description": "Thumbnail",
          "type": "string"
        }
      }
    },
    "HeroCard": {
      "description": "A Hero card (card with a single, large image)",
      "type": "object",
      "properties": {
        "title": {
          "description": "Title of the card",
          "type": "string"
        },
        "subtitle": {
          "description": "Subtitle of the card",
          "type": "string"
        },
        "text": {
          "description": "Text for the card",
          "type": "string"
        },
        "images": {
          "description": "Array of images for the card",
          "type": "array",
          "items": { "$ref": "#/definitions/CardImage" }
        },
        "buttons": {
          "description": "Set of actions applicable to the current card",
          "type": "array",
          "items": { "$ref": "#/definitions/CardAction" }
        },
        "tap": {
          "$ref": "#/definitions/CardAction",
          "description": "This action will be activated when user taps on the card itself"
        }
      }
    },
    "CardImage": {
      "description": "An image on a card",
      "type": "object",
      "properties": {
        "url": {
          "description": "URL Thumbnail image for major content property.",
          "type": "string"
        },
        "alt": {
          "description": "Image description intended for screen readers",
          "type": "string"
        },
        "tap": {
          "$ref": "#/definitions/CardAction",
          "description": "Action assigned to specific Attachment.E.g.navigate to specific URL or play/open media content"
        }
      }
    },
    "CardAction": {
      "description": "An action on a card",
      "type": "object",
      "properties": {
        "type": {
          "description": "Defines the type of action implemented by this button.",
          "type": "string"
        },
        "title": {
          "description": "Text description which appear on the button.",
          "type": "string"
        },
        "image": {
          "description": "URL Picture which will appear on the button, next to text label.",
          "type": "string"
        },
        "value": {
          "description": "Supplementary parameter for action. Content of this property depends on the ActionType",
          "type": "string"
        }
      }
    },
    "ThumbnailCard": {
      "description": "A thumbnail card (card with a single, small thumbnail image)",
      "type": "object",
      "properties": {
        "title": {
          "description": "Title of the card",
          "type": "string"
        },
        "subtitle": {
          "description": "Subtitle of the card",
          "type": "string"
        },
        "text": {
          "description": "Text for the card",
          "type": "string"
        },
        "images": {
          "description": "Array of images for the card",
          "type": "array",
          "items": { "$ref": "#/definitions/CardImage" }
        },
        "buttons": {
          "description": "Set of actions applicable to the current card",
          "type": "array",
          "items": { "$ref": "#/definitions/CardAction" }
        },
        "tap": {
          "$ref": "#/definitions/CardAction",
          "description": "This action will be activated when user taps on the card itself"
        }
      }
    },
    "ReceiptCard": {
      "description": "A receipt card",
      "type": "object",
      "properties": {
        "title": {
          "description": "Title of the card",
          "type": "string"
        },
        "items": {
          "description": "Array of Receipt Items",
          "type": "array",
          "items": { "$ref": "#/definitions/ReceiptItem" }
        },
        "facts": {
          "description": "Array of Fact Objects   Array of key-value pairs.",
          "type": "array",
          "items": { "$ref": "#/definitions/Fact" }
        },
        "tap": {
          "$ref": "#/definitions/CardAction",
          "description": "This action will be activated when user taps on the card"
        },
        "total": {
          "description": "Total amount of money paid (or should be paid)",
          "type": "string"
        },
        "tax": {
          "description": "Total amount of TAX paid(or should be paid)",
          "type": "string"
        },
        "vat": {
          "description": "Total amount of VAT paid(or should be paid)",
          "type": "string"
        },
        "buttons": {
          "description": "Set of actions applicable to the current card",
          "type": "array",
          "items": { "$ref": "#/definitions/CardAction" }
        }
      }
    },
    "ReceiptItem": {
      "description": "An item on a receipt card",
      "type": "object",
      "properties": {
        "title": {
          "description": "Title of the Card",
          "type": "string"
        },
        "subtitle": {
          "description": "Subtitle appears just below Title field, differs from Title in font styling only",
          "type": "string"
        },
        "text": {
          "description": "Text field appears just below subtitle, differs from Subtitle in font styling only",
          "type": "string"
        },
        "image": {
          "$ref": "#/definitions/CardImage",
          "description": "Image"
        },
        "price": {
          "description": "Amount with currency",
          "type": "string"
        },
        "quantity": {
          "description": "Number of items of given kind",
          "type": "string"
        },
        "tap": {
          "$ref": "#/definitions/CardAction",
          "description": "This action will be activated when user taps on the Item bubble."
        }
      }
    },
    "Fact": {
      "description": "Set of key-value pairs. Advantage of this section is that key and value properties will be \r\n            rendered with default style information with some delimiter between them. So there is no need for developer to specify style information.",
      "type": "object",
      "properties": {
        "key": {
          "description": "The key for this Fact",
          "type": "string"
        },
        "value": {
          "description": "The value for this Fact",
          "type": "string"
        }
      }
    },
    "SigninCard": {
      "description": "A card representing a request to sign in",
      "type": "object",
      "properties": {
        "text": {
          "description": "Text for signin request",
          "type": "string"
        },
        "buttons": {
          "description": "Action to use to perform signin",
          "type": "array",
          "items": { "$ref": "#/definitions/CardAction" }
        }
      }
    },
    "AudioCard": {
      "description": "A audio card",
      "type": "object",
      "properties": {
        "aspect": {
          "description": "Aspect ratio of thumbnail/media placeholder, allowed values are \"16x9\" and \"9x16\"",
          "type": "string"
        },
        "title": {
          "description": "Title of the card",
          "type": "string"
        },
        "subtitle": {
          "description": "Subtitle of the card",
          "type": "string"
        },
        "text": {
          "description": "Text of the card",
          "type": "string"
        },
        "image": {
          "$ref": "#/definitions/ThumbnailUrl",
          "description": "Thumbnail placeholder"
        },
        "media": {
          "description": "Array of media Url objects",
          "type": "array",
          "items": { "$ref": "#/definitions/MediaUrl" }
        },
        "buttons": {
          "description": "Set of actions applicable to the current card",
          "type": "array",
          "items": { "$ref": "#/definitions/CardAction" }
        },
        "shareable": {
          "description": "Is it OK for this content to be shareable with others (default:true)",
          "type": "boolean"
        },
        "autoloop": {
          "description": "Should the client loop playback at end of content (default:true)",
          "type": "boolean"
        },
        "autostart": {
          "description": "Should the client automatically start playback of video in this card (default:true)",
          "type": "boolean"
        }
      }
    },
    "ThumbnailUrl": {
      "description": "Object describing a media thumbnail",
      "type": "object",
      "properties": {
        "url": {
          "description": "url pointing to an thumbnail to use for media content",
          "type": "string"
        },
        "alt": {
          "description": "Alt text to display for screen readers on the thumbnail image",
          "type": "string"
        }
      }
    },
    "MediaUrl": {
      "description": "MediaUrl data",
      "type": "object",
      "properties": {
        "url": {
          "description": "Url for the media",
          "type": "string"
        },
        "profile": {
          "description": "Optional profile hint to the client to differentiate multiple MediaUrl objects from each other",
          "type": "string"
        }
      }
    },
    "AnimationCard": {
      "description": "An animation card (Ex: gif or short video clip)",
      "type": "object",
      "properties": {
        "title": {
          "description": "Title of the card",
          "type": "string"
        },
        "subtitle": {
          "description": "Subtitle of the card",
          "type": "string"
        },
        "text": {
          "description": "Text of the card",
          "type": "string"
        },
        "image": {
          "$ref": "#/definitions/ThumbnailUrl",
          "description": "Thumbnail placeholder"
        },
        "media": {
          "description": "Array of media Url objects",
          "type": "array",
          "items": { "$ref": "#/definitions/MediaUrl" }
        },
        "buttons": {
          "description": "Set of actions applicable to the current card",
          "type": "array",
          "items": { "$ref": "#/definitions/CardAction" }
        },
        "shareable": {
          "description": "Is it OK for this content to be shareable with others (default:true)",
          "type": "boolean"
        },
        "autoloop": {
          "description": "Should the client loop playback at end of content (default:true)",
          "type": "boolean"
        },
        "autostart": {
          "description": "Should the client automatically start playback of video in this card (default:true)",
          "type": "boolean"
        }
      }
    },
    "VideoCard": {
      "description": "A video card",
      "type": "object",
      "properties": {
        "title": {
          "description": "Title of the card",
          "type": "string"
        },
        "subtitle": {
          "description": "Subtitle of the card",
          "type": "string"
        },
        "text": {
          "description": "Text of the card",
          "type": "string"
        },
        "image": {
          "$ref": "#/definitions/ThumbnailUrl",
          "description": "Thumbnail placeholder"
        },
        "media": {
          "description": "Array of media Url objects",
          "type": "array",
          "items": { "$ref": "#/definitions/MediaUrl" }
        },
        "buttons": {
          "description": "Set of actions applicable to the current card",
          "type": "array",
          "items": { "$ref": "#/definitions/CardAction" }
        },
        "shareable": {
          "description": "Is it OK for this content to be shareable with others (default:true)",
          "type": "boolean"
        },
        "autoloop": {
          "description": "Should the client loop playback at end of content (default:true)",
          "type": "boolean"
        },
        "autostart": {
          "description": "Should the client automatically start playback of video in this card (default:true)",
          "type": "boolean"
        }
      }
    },
    "GeoCoordinates": {
      "description": "GeoCoordinates (entity type: \"https://schema.org/GeoCoordinates\")",
      "type": "object",
      "properties": {
        "elevation": {
          "format": "double",
          "description": "Elevation of the location [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)",
          "type": "number"
        },
        "latitude": {
          "format": "double",
          "description": "Latitude of the location [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)",
          "type": "number"
        },
        "longitude": {
          "format": "double",
          "description": "Longitude of the location [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)",
          "type": "number"
        },
        "type": {
          "description": "The type of the thing",
          "type": "string"
        },
        "name": {
          "description": "The name of the thing",
          "type": "string"
        }
      }
    },
    "Place": {
      "description": "Place (entity type: \"https://schema.org/Place\")",
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/Object",
          "description": "Address of the place (may be `string` or complex object of type `PostalAddress`)"
        },
        "geo": {
          "$ref": "#/definitions/Object",
          "description": "Geo coordinates of the place (may be complex object of type `GeoCoordinates` or `GeoShape`)"
        },
        "hasMap": {
          "$ref": "#/definitions/Object",
          "description": "Map to the place (may be `string` (URL) or complex object of type `Map`)"
        },
        "type": {
          "description": "The type of the thing",
          "type": "string"
        },
        "name": {
          "description": "The name of the thing",
          "type": "string"
        }
      }
    }
  }
}