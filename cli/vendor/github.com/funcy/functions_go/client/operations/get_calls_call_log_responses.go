package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/funcy/functions_go/models"
)

// GetCallsCallLogReader is a Reader for the GetCallsCallLog structure.
type GetCallsCallLogReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCallsCallLogReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetCallsCallLogOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetCallsCallLogNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetCallsCallLogOK creates a GetCallsCallLogOK with default headers values
func NewGetCallsCallLogOK() *GetCallsCallLogOK {
	return &GetCallsCallLogOK{}
}

/*GetCallsCallLogOK handles this case with default header values.

Log found
*/
type GetCallsCallLogOK struct {
	Payload *models.LogWrapper
}

func (o *GetCallsCallLogOK) Error() string {
	return fmt.Sprintf("[GET /calls/{call}/log][%d] getCallsCallLogOK  %+v", 200, o.Payload)
}

func (o *GetCallsCallLogOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LogWrapper)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCallsCallLogNotFound creates a GetCallsCallLogNotFound with default headers values
func NewGetCallsCallLogNotFound() *GetCallsCallLogNotFound {
	return &GetCallsCallLogNotFound{}
}

/*GetCallsCallLogNotFound handles this case with default header values.

Log not found.
*/
type GetCallsCallLogNotFound struct {
	Payload *models.Error
}

func (o *GetCallsCallLogNotFound) Error() string {
	return fmt.Sprintf("[GET /calls/{call}/log][%d] getCallsCallLogNotFound  %+v", 404, o.Payload)
}

func (o *GetCallsCallLogNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
