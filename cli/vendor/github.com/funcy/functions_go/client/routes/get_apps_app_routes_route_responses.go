// Code generated by go-swagger; DO NOT EDIT.

package routes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/funcy/functions_go/models"
)

// GetAppsAppRoutesRouteReader is a Reader for the GetAppsAppRoutesRoute structure.
type GetAppsAppRoutesRouteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAppsAppRoutesRouteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetAppsAppRoutesRouteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetAppsAppRoutesRouteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetAppsAppRoutesRouteDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetAppsAppRoutesRouteOK creates a GetAppsAppRoutesRouteOK with default headers values
func NewGetAppsAppRoutesRouteOK() *GetAppsAppRoutesRouteOK {
	return &GetAppsAppRoutesRouteOK{}
}

/*GetAppsAppRoutesRouteOK handles this case with default header values.

Route information
*/
type GetAppsAppRoutesRouteOK struct {
	Payload *models.RouteWrapper
}

func (o *GetAppsAppRoutesRouteOK) Error() string {
	return fmt.Sprintf("[GET /apps/{app}/routes/{route}][%d] getAppsAppRoutesRouteOK  %+v", 200, o.Payload)
}

func (o *GetAppsAppRoutesRouteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RouteWrapper)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppsAppRoutesRouteNotFound creates a GetAppsAppRoutesRouteNotFound with default headers values
func NewGetAppsAppRoutesRouteNotFound() *GetAppsAppRoutesRouteNotFound {
	return &GetAppsAppRoutesRouteNotFound{}
}

/*GetAppsAppRoutesRouteNotFound handles this case with default header values.

Route does not exist.
*/
type GetAppsAppRoutesRouteNotFound struct {
	Payload *models.Error
}

func (o *GetAppsAppRoutesRouteNotFound) Error() string {
	return fmt.Sprintf("[GET /apps/{app}/routes/{route}][%d] getAppsAppRoutesRouteNotFound  %+v", 404, o.Payload)
}

func (o *GetAppsAppRoutesRouteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppsAppRoutesRouteDefault creates a GetAppsAppRoutesRouteDefault with default headers values
func NewGetAppsAppRoutesRouteDefault(code int) *GetAppsAppRoutesRouteDefault {
	return &GetAppsAppRoutesRouteDefault{
		_statusCode: code,
	}
}

/*GetAppsAppRoutesRouteDefault handles this case with default header values.

Unexpected error
*/
type GetAppsAppRoutesRouteDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get apps app routes route default response
func (o *GetAppsAppRoutesRouteDefault) Code() int {
	return o._statusCode
}

func (o *GetAppsAppRoutesRouteDefault) Error() string {
	return fmt.Sprintf("[GET /apps/{app}/routes/{route}][%d] GetAppsAppRoutesRoute default  %+v", o._statusCode, o.Payload)
}

func (o *GetAppsAppRoutesRouteDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
