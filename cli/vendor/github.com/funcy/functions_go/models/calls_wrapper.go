// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CallsWrapper calls wrapper
// swagger:model CallsWrapper
type CallsWrapper struct {

	// calls
	// Required: true
	Calls []*Call `json:"calls"`

	// error
	Error *ErrorBody `json:"error,omitempty"`
}

// Validate validates this calls wrapper
func (m *CallsWrapper) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCalls(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CallsWrapper) validateCalls(formats strfmt.Registry) error {

	if err := validate.Required("calls", "body", m.Calls); err != nil {
		return err
	}

	for i := 0; i < len(m.Calls); i++ {

		if swag.IsZero(m.Calls[i]) { // not required
			continue
		}

		if m.Calls[i] != nil {

			if err := m.Calls[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("calls" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CallsWrapper) validateError(formats strfmt.Registry) error {

	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {

		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CallsWrapper) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CallsWrapper) UnmarshalBinary(b []byte) error {
	var res CallsWrapper
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
