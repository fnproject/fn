swagger: '2.0'

# TODO(?): remove stats from call?
# TODO(?): amend log api? if we have /app/logs we could tail logs on an app (or trig?) and have point lookup for call still
# TODO(?): add /run API to swagger doc? (only covers API module atm)
# TODO(?): should trigger have an 'enabled' field to easily toggle on and off via API?
# TODO: let's punt on adding a row for FuncVersions with snapshots of each func version? just a string field for now.
# TODO: put body and response objects have different required fields, etc; make 2 objects?
# TODO: change all params to $ref's (few left)
# TODO(orcl): 204 DELETE success
# TODO(orcl): 401 - should we define this to delineate w/ 404 even tho we don't have auth by default?

info:
  title: fn
  description: The open source serverless platform.
  version: "0.3.0"
# the domain of the service
host: "127.0.0.1:8080"
# array of all schemes that your API supports
schemes:
  - https
  - http
# will be prefixed to all paths
basePath: /v1
consumes:
  - application/json
produces:
  - application/json
paths:
  /funcs:
    get:
      operationId: "ListFuncs"
      summary: "Get all funcs."
      description: "Get a list of all the funcs in alphabetical order."
      tags:
        - Funcs
      parameters:
        - $ref: '#/definitions/cursorParam'
        - $ref: '#/definitions/perPageParam'
      responses:
        200:
          description: List of funcs.
          schema:
            $ref: '#/definitions/FuncsWrapper'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /funcs/{func}:
    delete:
      operationId: "DeleteFunc"
      summary: "Delete a func."
      description: "Delete a func."
      tags:
        - Funcs
      parameters:
        - $ref: '#/definitions/funcPathParam'
      responses:
        200:
          description: Func successfully deleted.
        404:
          description: Func does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    get:
      operationId: "GetFunc"
      summary: "Get information for a func."
      description: "Get information for a func."
      tags:
        - Funcs
      parameters:
        - $ref: '#/definitions/funcPathParam'
      responses:
        200:
          description: Func details.
          schema:
            $ref: '#/definitions/FuncWrapper'
        404:
          description: Func does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    patch:
      operationId: "UpdateFunc"
      summary: "Updates a func."
      description: "Updates any provided fields on the func."
      tags:
        - Funcs
      parameters:
        - $ref: '#/definitions/funcPathParam'
        - name: body
          in: body
          description: Func object.
          required: true
          schema:
            $ref: '#/definitions/FuncWrapper'
      responses:
        200:
          description: Func details.
          schema:
            $ref: '#/definitions/FuncWrapper'
        400:
          description: Parameters are missing or invalid.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Func does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: "UpsertFunc"
      summary: "Create or update a func."
      description: "Creates a func if it does not exist, or updates the func if it does."
      tags:
        - Func
      parameters:
        - $ref: '#/definitions/funcPathParam'
        - name: body
          in: body
          description: Func to create or update.
          required: true
          schema:
            $ref: '#/definitions/FuncWrapper'
      responses:
        200:
          description: Func details.
          schema:
            $ref: '#/definitions/FuncWrapper'
        400:
          description: Parameters are missing or invalid.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /apps:
    get:
      operationId: "ListApps"
      summary: "Get all apps."
      description: "Get a list of all the apps, returned in alphabetical order."
      tags:
        - Apps
      parameters:
        - $ref: '#/definitions/cursorParam'
        - $ref: '#/definitions/perPageParam'
      responses:
        200:
          description: List of apps.
          schema:
            $ref: '#/definitions/AppsWrapper'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /apps/{app}:
    delete:
      operationId: "DeleteApp"
      summary: "Delete an app."
      description: "Delete an app."
      tags:
        - Apps
      parameters:
        - $ref: '#/definitions/appPathParam'
      responses:
        200:
          description: Apps successfully deleted.
        404:
          description: App does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    get:
      operationId: "GetApp"
      summary: "Get information for an app."
      description: "Get information for an app."
      tags:
        - Apps
      parameters:
        - $ref: '#/definitions/appPathParam'
      responses:
        200:
          description: App details.
          schema:
            $ref: '#/definitions/AppWrapper'
        404:
          description: App does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    patch:
      operationId: "UpdateApp"
      summary: "Updates an app."
      description: "Updates any provided fields on the app. App must exist."
      tags:
        - Apps
      parameters:
        - $ref: '#/definitions/appPathParam'
        - name: body
          in: body
          description: App object.
          required: true
          schema:
            $ref: '#/definitions/AppWrapper'
      responses:
        200:
          description: App details.
          schema:
            $ref: '#/definitions/AppWrapper'
        400:
          description: Parameters are missing or invalid.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: App does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: "UpsertApp"
      summary: "Create or update an app."
      description: "Creates an app if it does not exist, or updates the app if it does."
      tags:
        - Apps
      parameters:
        - $ref: '#/definitions/appPathParam'
        - name: body
          in: body
          description: App to create or update.
          required: true
          schema:
            $ref: '#/definitions/AppWrapper'
      responses:
        200:
          description: App details.
          schema:
            $ref: '#/definitions/AppWrapper'
        400:
          description: Parameters are missing or invalid.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /apps/{app}/triggers:
    get:
      operationId: "ListTriggers"
      summary: Get trigger list by app name.
      description: This will list triggers for a particular app, returned in alphabetical order.
      tags:
        - Triggers
      parameters:
        - $ref: '#/definitions/appPathParam'
        - name: image
          description: Trigger image to match, exact.
          required: false
          type: string
          in: query
        - $ref: '#/definitions/cursorParam'
        - $ref: '#/definitions/perPageParam'
      responses:
        200:
          description: Trigger information
          schema:
            $ref: '#/definitions/TriggerWrapper'
        404:
          description: App does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /apps/{app}/triggers/{trigger}:
    put:
      operationId: "UpsertTrigger"
      summary: Create or update a Trigger.
      description: Create a new trigger in an app or update it. If app doesn't exists, it creates the app.
      tags:
        - Triggers
      parameters:
        - $ref: '#/definitions/appPathParam'
        - $ref: '#/definitions/triggerPathParam'
        - name: body
          in: body
          description: Trigger to create or update.
          required: true
          schema:
            $ref: '#/definitions/TriggerWrapper'
      responses:
        200:
          description: Trigger created
          schema:
            $ref: '#/definitions/TriggerWrapper'
        400:
          description: Invalid trigger due to parameters being missing or invalid.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    patch:
      operationId: "UpdateTrigger"
      summary: Update a Trigger, Fails if the trigger or app does not exist. Accepts partial updates / skips validation of zero values.
      description: Update a trigger
      tags:
        - Triggers
      parameters:
        - $ref: '#/definitions/appPathParam'
        - $ref: '#/definitions/triggerPathParam'
        - name: trigger
          in: path
          description: trigger path.
          required: true
          type: string
        - name: body
          in: body
          description: Trigger fields to update.
          required: true
          schema:
            $ref: '#/definitions/TriggerWrapper'
      responses:
        200:
          description: Trigger updated
          schema:
            $ref: '#/definitions/TriggerWrapper'
        400:
          description: Invalid trigger due to parameters being missing or invalid.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: App / Trigger does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    get:
      operationId: "GetTrigger"
      summary: Gets trigger by name
      description: Gets a trigger by name.
      tags:
        - Triggers
      parameters:
        - $ref: '#/definitions/appPathParam'
        - $ref: '#/definitions/triggerPathParam'
      responses:
        200:
          description: Trigger information
          schema:
            $ref: '#/definitions/TriggerWrapper'
        404:
          description: Trigger does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

    delete:
      operationId: "DeleteTrigger"
      summary: Deletes the trigger
      description: Deletes the trigger.
      tags:
        - Triggers
      parameters:
        - $ref: '#/definitions/appPathParam'
        - $ref: '#/definitions/triggerPathParam'
      responses:
        200:
          description: Trigger successfully deleted.
        404:
          description: Trigger does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /apps/{app}/calls/{call}/log:
    get:
      operationId: "GetCallLog"
      summary: Get call logs
      description: Get call logs
      tags:
        - Call
        - Log
      parameters:
        - $ref: '#/definitions/appPathParam'
        - $ref: '#/definitions/callPathParam'
      responses:
        200:
          description: Log found
          schema:
            $ref:  '#/definitions/LogWrapper'
        404:
          description: Log not found.
          schema:
            $ref: '#/definitions/Error'

  /apps/{app}/calls/{call}:
    get:
      operationId: "GetCall"
      summary: Get call information
      description: Get call information
      tags:
        - Call
      parameters:
        - $ref: '#/definitions/appPathParam'
        - $ref: '#/definitions/callPathParam'
      responses:
        200:
          description: Call found
          schema:
            $ref:  '#/definitions/CallWrapper'
        404:
          description: Call not found.
          schema:
            $ref: '#/definitions/Error'

  /apps/{app}/calls:
    get:
      operationId: "ListCalls"
      summary: Get app-bound calls.
      description: Get app-bound calls can filter to trigger-bound calls, results returned in created_at, descending order (newest first).
      tags:
        - Call
      parameters:
        - $ref: '#/definitions/appPathParam'
        - $ref: '#/definitions/triggerPathParam'
        - $ref: '#/definitions/cursorParam'
        - $ref: '#/definitions/perPageParam'
        - $ref: '#/definitions/fromTimeQueryParam'
        - $ref: '#/definitions/toTimeQueryParam'
      responses:
        200:
          description: Calls found
          schema:
            $ref:  '#/definitions/CallsWrapper'
        404:
          description: Calls not found.
          schema:
            $ref: '#/definitions/Error'

definitions:
  Func:
    type: object
    properties:
      id:
        type: string
        description: App ID
        readOnly: true
      name:
        type: string
        description: unique name for this function.
        # TODO(travis): below implies version, is this a field too ?
        # FunctionName a fully qualified function name referencing a function in a repository. eg: `funchub.fnproject.io/jimbo/somefunc:1.2.3`
      image:
        type: string
        description: "full container image name, e.g. hub.docker.com/fnproject/yo or fnproject/yo (default registry: hub.docker.com)"
      version:
        type: string
        descripton: version for this function, e.g. '0.0.42'
      config:
        type: object
        description: Function configuration - this is the base configuration
        additionalProperties:
          type: string
      $ref: '#/definitions/MemoryResource'
      $ref: '#/definitions/CPUResource'
      $ref: '#/definitions/TimeoutResource'
      $ref: '#/definitions/IdleTimeoutResource'
      # TODO(?) annotations? 
      created_at:
        type: string
        format: date-time
        description: Time when function was created. Always in UTC RFC3339.
        readOnly: true
      updated_at:
        type: string
        format: date-time
        description: Most recent time that function was updated. Always in UTC RFC3339.
        readOnly: true

  Trigger:
    type: object
    properties:
      app_id:
        type: string
        description: App ID
      id:
        type: string
        description: App ID
        readOnly: true
      name:
        type: string
        description: unique name for this trigger, used to identify this trigger
      type:
        type: string
        description: class of trigger, e.g. schedule, http
      source:
        type: string
        description: uri path for this trigger. e.g. `sayHello`, `say/hello`
      func:
        type: string
        description: "fully qualified function name referencing a function in a repository. eg: `funchub.fnproject.io/jimbo/somefunc:1.2.3`"
      $ref: '#/definitions/MemoryResource'
      $ref: '#/definitions/CPUResource'
      $ref: '#/definitions/TimeoutResource'
      $ref: '#/definitions/IdleTimeoutResource'
      config:
        type: object
        description: Trigger configuration - overrides application configuration
        additionalProperties:
          type: string
      annotations:
        type: object
        description: Trigger annotations - this is a map of annotations attached to this trigger, keys must not exceed 128 bytes and must consist of non-whitespace printable ascii characters, and the seralized representation of individual values must not exeed 512 bytes
        additionalProperties:
          type: object
      created_at:
        type: string
        format: date-time
        description: Time when trigger was created. Always in UTC.
        readOnly: true
      updated_at:
        type: string
        format: date-time
        description: Most recent time that trigger was updated. Always in UTC.
        readOnly: true

  App:
    type: object
    properties:
      id:
        type: string
        description: App ID
        readOnly: true
      name:
        type: string
        description: Name of this app. Must be different than the image name. Can ony contain alphanumeric, -, and _.
      config:
        type: object
        description: Application function configuration, applied to all triggers.
        additionalProperties:
          type: string
      annotations:
        type: object
        description: Application annotations - this is a map of annotations attached to this app, keys must not exceed 128 bytes and must consist of non-whitespace printable ascii characters, and the seralized representation of individual values must not exeed 512 bytes
        additionalProperties:
          type: object
      created_at:
        type: string
        format: date-time
        description: Time when app was created. Always in UTC.
        readOnly: true
      updated_at:
        type: string
        format: date-time
        description: Most recent time that app was updated. Always in UTC.
        readOnly: true

  FuncsWrapper:
    type: object
    required:
      - funcs
    properties:
      $ref: '#/definitions/nextCursorParam'
      triggers:
        type: array
        items:
          $ref: '#/definitions/Func'
      error:
        $ref: '#/definitions/ErrorBody'

  FuncWrapper:
    type: object
    required:
      - func
    properties:
      message:
        type: string
      error:
        $ref: '#/definitions/ErrorBody'
      func:
        $ref: '#/definitions/Func'

  TriggersWrapper:
    type: object
    required:
      - triggers
    properties:
      $ref: '#/definitions/nextCursorParam'
      triggers:
        type: array
        items:
          $ref: '#/definitions/Trigger'
      error:
        $ref: '#/definitions/ErrorBody'

  TriggerWrapper:
    type: object
    required:
      - trigger
    properties:
      message:
        type: string
      error:
        $ref: '#/definitions/ErrorBody'
      trigger:
        $ref: '#/definitions/Trigger'

  AppsWrapper:
    # TODO(reed): change all wrappers to only return list of names (or call ids)?
    type: object
    required:
      - apps
    properties:
      $ref: '#/definitions/nextCursorParam'
      apps:
        type: array
        items:
          $ref: '#/definitions/App'
      error:
        $ref: '#/definitions/ErrorBody'

  AppWrapper:
    type: object
    required:
      - app
    properties:
      app:
        $ref: '#/definitions/App'
      error:
        $ref: '#/definitions/ErrorBody'

  CallsWrapper:
    type: object
    required:
      - calls
    properties:
      $ref: '#/definitions/nextCursorParam'
      calls:
        type: array
        items:
          $ref: '#/definitions/Call'
      error:
        $ref: '#/definitions/ErrorBody'

  CallWrapper:
    type: object
    required:
      - call
    properties:
      call:
        $ref: '#/definitions/Call'
        description: "Call object."

  LogWrapper:
    type: object
    required:
      - log
    properties:
      log:
        $ref: '#/definitions/Log'
        description: "Call log entry."

  Log:
    type: object
    properties:
      call_id:
        type: string
        description: Call ID
      log:
        type: string # maybe bytes, long logs wouldn't fit into string type

  Call:
    type: object
    properties:
      id:
        type: string
        description: Call ID.
        readOnly: true
      status:
        type: string
        description: Call execution status.
        readOnly: true
      error:
        type: string
        description: Call execution error, if status is 'error'.
        readOnly: true
      app_id:
        type: string
        description: App ID of trigger
        readOnly: true
      trigger_id:
        type: string
        description: App trigger that is being executed.
        readOnly: true
      created_at:
        type: string
        format: date-time
        description: Time when call was submitted. Always in UTC.
        readOnly: true
      started_at:
        type: string
        format: date-time
        description: Time when call started execution. Always in UTC.
        readOnly: true
      completed_at:
        type: string
        format: date-time
        description: Time when call completed, whether it was successul or failed. Always in UTC.
        readOnly: true
      stats:
        type: array
        items:
          $ref: '#/definitions/Stat'
        description: A histogram of stats for a call, each is a snapshot of a calls state at the timestamp.
        readOnly: true

  Stat:
    type: object
    properties:
      timestamp:
        type: string
        format: date-time
      metrics:
        type: object
        properties:
          net_rx:
            type: integer
            format: int64
          net_tx:
            type: integer
            format: int64
          mem_limit:
            type: integer
            format: int64
          mem_usage:
            type: integer
            format: int64
          disk_read:
            type: integer
            format: int64
          disk_write:
            type: integer
            format: int64
          cpu_user:
            type: integer
            format: int64
          cpu_total:
            type: integer
            format: int64
          cpu_kernel:
            type: integer
            format: int64

  ErrorBody:
    type: object
    properties:
      message:
        type: string
        readOnly: true
      fields:
        type: string
        readOnly: true

  Error:
    type: object
    properties:
      error:
        $ref: '#/definitions/ErrorBody'

  cursorParam:
    name: cursor
    description: Cursor from previous response.next_cursor to begin results after, if any.
    required: false
    type: string
    in: query
  perPageParam:
    name: per_page
    description: Number of results to return, defaults to 30. Max of 100.
    required: false
    type: integer
    in: query
  nextCursorParam:
    name: next_cursor
    type: string
    description: cursor to send with subsequent request to receive the next page, if non-empty
    readOnly: true
  appPathParam:
    name: app
    in: path
    description: App name.
    required: true
    type: string
  triggerPathParam:
    name: trigger
    in: path
    description: Trigger name.
    required: true
    type: string
  funcPathParam:
    name: func
    in: path
    description: Func name.
    required: true
    type: string
  callPathParam:
    name: call
    description: Call ID.
    required: true
    type: string
    in: path
  fromTimeQueryParam:
    name: from_time
    description: Unix timestamp in seconds, of call.created_at to begin the results at, default 0.
    required: false
    type: integer
    in: query
  toTimeQueryParam:
    name: to_time
    description: Unix timestamp in seconds, of call.created_at to end the results at, defaults to latest.
    required: false
    type: integer
    in: query

  # resources
  MemoryResource:
      name: memory
      type: integer
      format: uint64
      description: Max usable memory given to function (MiB).
  CPUResource:
      name: cpus
      type: string
      description: Max usable CPU cores for this trigger. Value in MilliCPUs (eg. 500m) or as floating-point (eg. 0.5)
  TimeoutResource:
      name: timeout
      type: integer
      default: 30
      format: int32
      description: Timeout for executions of a function. Value in Seconds
  IdleTimeoutResource:
      name: idle_timeout
      type: integer
      default: 30
      format: int32
      description: Hot functions idle timeout before container termination. Value in Seconds


