swagger: '2.0'

# TODO(?): add /run API to swagger doc? (only covers API module atm)

info:
  title: fn
  description: The open source serverless platform.
  version: "0.3.0"
# the domain of the service
host: "127.0.0.1:8080"
# array of all schemes that your API supports
schemes:
  - https
  - http
# will be prefixed to all paths
basePath: /v1
consumes:
  - application/json
produces:
  - application/json
paths:
  /apps/{app}/fns:
    get:
      operationId: "ListFns"
      summary: "Get all fns"
      description: "Get a list of all the Functions in alphabetical order."
      tags:
        - Fns
      parameters:
        - $ref: '#/parameters/AppName'
        - $ref: '#/parameters/cursor'
        - $ref: '#/parameters/perPage'
      responses:
        200:
          description: List of fns.
          schema:
            $ref: '#/definitions/FnList'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        404:
          description: App does not exist
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /apps/{app}/fns/{fn}:
    delete:
      operationId: "DeleteFn"
      summary: "Delete a fn"
      description: "Delete a function."
      tags:
        - Fns
      parameters:
        - $ref: '#/parameters/AppName'
        - $ref: '#/parameters/FnName'
      responses:
        204:
          description: Fn successfully deleted
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Fn does not exist
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    get:
      operationId: "GetFn"
      summary: "Get metadata for a fn"
      description: "Get metadata for a Function."
      tags:
        - Fns
      parameters:
        - $ref: '#/parameters/AppName'
        - $ref: '#/parameters/FnName'
      responses:
        200:
          description: Fn metadata
          schema:
            $ref: '#/definitions/Fn'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Fn does not exist
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: "UpsertFn"
      summary: "Upsert a fn"
      description: "Creates or updates a Function."
      tags:
        - Fns
      parameters:
        - $ref: '#/parameters/AppName'
        - $ref: '#/parameters/FnName'
        - name: body
          in: body
          description: Fn to upsert
          required: true
          schema:
            $ref: '#/definitions/Fn'
      responses:
        200:
          description: Fn metadata
          schema:
            $ref: '#/definitions/Fn'
        400:
          description: Parameters are missing or invalid
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /apps:
    get:
      operationId: "ListApps"
      summary: "Get all apps"
      description: "Get a list of all the Applications, returned in alphabetical order."
      tags:
        - Apps
      parameters:
        - $ref: '#/parameters/cursor'
        - $ref: '#/parameters/perPage'
      responses:
        200:
          description: List of apps
          schema:
            $ref: '#/definitions/AppList'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /apps/{app}:
    delete:
      operationId: "DeleteApp"
      summary: "Delete an app"
      description: "Delete an Application."
      tags:
        - Apps
      parameters:
        - $ref: '#/parameters/AppName'
      responses:
        204:
          description: App successfully deleted
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        404:
          description: App does not exist
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    get:
      operationId: "GetApp"
      summary: "Get app data"
      description: "Get data for an Application."
      tags:
        - Apps
      parameters:
        - $ref: '#/parameters/AppName'
      responses:
        200:
          description: App data
          schema:
            $ref: '#/definitions/App'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        404:
          description: App does not exist
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: "UpsertsApp"
      summary: "Upserts an app"
      description: "Creates or updates any provided fields on the app."
      tags:
        - Apps
      parameters:
        - $ref: '#/parameters/AppName'
        - name: body
          in: body
          description: App data.
          required: true
          schema:
            $ref: '#/definitions/App'
      responses:
        200:
          description: App data
          schema:
            $ref: '#/definitions/App'
        400:
          description: Parameters are missing or invalid
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        404:
          description: App does not exist
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /apps/{app}/triggers:
    get:
      operationId: "ListTriggers"
      summary: List triggers associated with app
      description: This will list all Triggers for a particular Application, returned in name alphabetical order.
      tags:
        - Triggers
      parameters:
        - $ref: '#/parameters/AppName'
        - $ref: '#/parameters/cursor'
        - $ref: '#/parameters/perPage'
        - $ref: '#/parameters/FnNameQuery'
        # Can add type, route, etc qparams as required
      responses:
        200:
          description: Trigger data
          schema:
            $ref: '#/definitions/TriggerList'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        404:
          description: App does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /apps/{app}/triggers/{trigger}:
    get:
      operationId: "GetTrigger"
      summary: Gets Trigger by Name
      description: Gets a Trigger by Name.
      tags:
        - Triggers
      parameters:
        - $ref: '#/parameters/AppName'
        - $ref: '#/parameters/TriggerName'
      responses:
        200:
          description: Trigger information
          schema:
            $ref: '#/definitions/Trigger'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Trigger does not exist
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: "UpsertTrigger"
      summary: Create or Update a Trigger.
      description: Creates or updates a Trigger in an Application.
      tags:
        - Triggers
      parameters:
        - $ref: '#/parameters/AppName'
        - $ref: '#/parameters/TriggerName'
        - name: body
          in: body
          description: Trigger to upsert.
          required: true
          schema:
            $ref: '#/definitions/Trigger'
      responses:
        200:
          description: Created Triggers data
          schema:
            $ref: '#/definitions/Trigger'
        400:
          description: Invalid trigger due to parameters being missing or invalid.
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

    delete:
      operationId: "DeleteTrigger"
      summary: Deletes the Trigger
      description: Deletes the Trigger.
      tags:
        - Triggers
      parameters:
        - $ref: '#/parameters/AppName'
        - $ref: '#/parameters/TriggerName'
      responses:
        204:
          description: Trigger successfully deleted.
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Trigger does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /apps/{app}/fns/{fn}/calls/{call}/log:
    get:
      operationId: "GetCallLog"
      summary: Get call log
      description: Get call log
      tags:
        - Call
        - Log
      parameters:
        - $ref: '#/parameters/AppName'
        - $ref: '#/parameters/FnName'
        - $ref: '#/parameters/callID'
      responses:
        200:
          description: Log found
          schema:
            $ref:  '#/definitions/Log'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Log not found.
          schema:
            $ref: '#/definitions/Error'

  /apps/{app}/fns/{fn}/calls/{call}:
    get:
      operationId: "GetCall"
      summary: Get call information
      description: Get call information
      tags:
        - Call
      parameters:
        - $ref: '#/parameters/AppName'
        - $ref: '#/parameters/FnName'
        - $ref: '#/parameters/callID'
      responses:
        200:
          description: Call found
          schema:
            $ref:  '#/definitions/Call'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Call not found.
          schema:
            $ref: '#/definitions/Error'

  /apps/{app}/fn/{fn}/calls:
    get:
      operationId: "ListCalls"
      summary: Get app-bound calls.
      description: Get app-bound calls can filter to trigger-bound calls, results returned in created_at, descending order (newest first).
      tags:
        - Call
      parameters:
        - $ref: '#/parameters/AppName'
        - $ref: '#/parameters/FnName'
        - $ref: '#/parameters/TriggerNameQuery'
        - $ref: '#/parameters/cursor'
        - $ref: '#/parameters/perPage'
        - $ref: '#/parameters/fromTimeQuery'
        - $ref: '#/parameters/toTimeQuery'
      responses:
        200:
          description: Calls found
          schema:
            $ref:  '#/definitions/CallList'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Calls not found.
          schema:
            $ref: '#/definitions/Error'

definitions:
  Fn:
    type: object
    properties:
      id:
        type: string
        description: UUID
        readOnly: true
      name:
        type: string
        description: unique name for this function.
      app_name:
        $ref: '#/parameters/AppName'
      image:
        type: string
        description: "full container image name, e.g. hub.docker.com/fnproject/yo or fnproject/yo (default registry: hub.docker.com)"
      version:
        type: string
        description: "version for this function, e.g. '0.0.42'"
      config:
        type: object
        description: Function configuration - this is the base configuration
        properties:
          mem:
            $ref: '#/definitions/MemoryResource'
          cpu:
            $ref: '#/definitions/CPUResource'
          execution_timeout:
            $ref: '#/definitions/TimeoutResource'
          idle_timeout:
            $ref: '#/definitions/IdleTimeoutResource'
      # TODO(?) annotations?
      created_at:
        type: string
        format: date-time
        description: Time when function was created. Always in UTC RFC3339.
        readOnly: true
      updated_at:
        type: string
        format: date-time
        description: Most recent time that function was updated. Always in UTC RFC3339.
        readOnly: true
      status:
        $ref: '#/definitions/FnStatus'

  Trigger:
    type: object
    properties:
      id:
        type: string
        description: UUID
        readOnly: true
      name:
        type: string
        description: unique name for this trigger, used to identify this trigger
      type:
        type: string
        description: class of trigger, e.g. schedule, http
        enum: [http, stream]
      source:
        type: string
        description: uri path for this trigger. e.g. `sayHello`, `say/hello`
      fn_name:
        $ref: '#/parameters/FnName'
      app_name:
        $ref: '#/parameters/AppName'
      annotations:
        type: object
        description: Trigger annotations - this is a map of annotations attached to this trigger, keys must not exceed 128 bytes and must consist of non-whitespace printable ascii characters, and the seralized representation of individual values must not exeed 512 bytes
        additionalProperties:
          type: object
      created_at:
        type: string
        format: date-time
        description: Time when trigger was created. Always in UTC.
        readOnly: true
      updated_at:
        type: string
        format: date-time
        description: Most recent time that trigger was updated. Always in UTC.
        readOnly: true
      status:
        $ref: '#/definitions/TriggerStatus'

  App:
    type: object
    properties:
      id:
        type: string
        description: UUID
        readOnly: true
      name:
        type: string
        description: Name of this app. Can ony contain alphanumeric, -, and _.
      config:
        type: object
        description: Application function configuration, applied to all triggers.
        additionalProperties:
          type: string
      annotations:
        type: object
        description: Application annotations - this is a map of annotations attached to this app, keys must not exceed 128 bytes and must consist of non-whitespace printable ascii characters, and the seralized representation of individual values must not exeed 512 bytes
        additionalProperties:
          type: object
      created_at:
        type: string
        format: date-time
        description: Time when app was created. Always in UTC.
        readOnly: true
      updated_at:
        type: string
        format: date-time
        description: Most recent time that app was updated. Always in UTC.
        readOnly: true

  FnList:
    type: object
    required:
      - fns
    properties:
      next:
        $ref: '#/definitions/nextCursor'
      fns:
        type: array
        items:
          $ref: '#/definitions/Fn'

  TriggerList:
    type: object
    required:
      - triggers
    properties:
      next:
        $ref: '#/definitions/nextCursor'
      triggers:
        type: array
        items:
          $ref: '#/definitions/Trigger'

  AppList:
    type: object
    required:
      - apps
    properties:
      next:
        $ref: '#/definitions/nextCursor'
      apps:
        type: array
        items:
          $ref: '#/definitions/App'

  CallList:
    type: object
    required:
      - calls
    properties:
      next:
        $ref: '#/definitions/nextCursor'
      calls:
        type: array
        items:
          $ref: '#/definitions/Call'
      error:
        $ref: '#/definitions/ErrorBody'

  Log:
    type: object
    properties:
      call_id:
        type: string
        description: Call ID
      log:
        type: string # maybe bytes, long logs wouldn't fit into string type

  Call:
    type: object
    properties:
      id:
        type: string
        description: Call ID.
        readOnly: true
      status:
        type: string
        description: Call execution status.
        readOnly: true
      error:
        type: string
        description: Call execution error, if status is 'error'.
        readOnly: true
      app_name:
        type: string
        description: App name
        readOnly: true
      trigger_name:
        type: string
        description: Trigger name the call was routed via
        readOnly: true
      function_name:
        type: string
        description: Function name the call was executed by
        readOnly: true
      image_id:
        type: string
        description: Docker image sha of executing function
      created_at:
        type: string
        format: date-time
        description: Time when call was submitted. Always in UTC.
        readOnly: true
      started_at:
        type: string
        format: date-time
        description: Time when call started execution. Always in UTC.
        readOnly: true
      completed_at:
        type: string
        format: date-time
        description: Time when call completed, whether it was successul or failed. Always in UTC.
        readOnly: true
      stats:
        type: array
        items:
          $ref: '#/definitions/Stat'
        description: A histogram of stats for a call, each is a snapshot of a calls state at the timestamp.
        readOnly: true

  Stat:
    type: object
    properties:
      timestamp:
        type: string
        format: date-time
      metrics:
        type: object
        properties:
          net_rx:
            type: integer
            format: int64
          net_tx:
            type: integer
            format: int64
          mem_limit:
            type: integer
            format: int64
          mem_usage:
            type: integer
            format: int64
          disk_read:
            type: integer
            format: int64
          disk_write:
            type: integer
            format: int64
          cpu_user:
            type: integer
            format: int64
          cpu_total:
            type: integer
            format: int64
          cpu_kernel:
            type: integer
            format: int64

  ErrorBody:
    type: object
    properties:
      message:
        type: string
        readOnly: true
      fields:
        type: string
        readOnly: true

  Error:
    type: object
    properties:
      error:
        $ref: '#/definitions/ErrorBody'

  nextCursor:
    type: string
    description: cursor to send with subsequent request to receive the next page, if non-empty
    readOnly: true

  FnStatus:
    type: string
    enum: [enabled, disabled]
  TriggerStatus:
    type: string
    enum: [enabled, disabled]

  # resources
  MemoryResource:
      type: integer
      format: uint64
      description: Max usable memory given to function (MiB).
  CPUResource:
      type: string
      description: Max usable CPU cores for this trigger. Value in MilliCPUs (eg. 500m) or as floating-point (eg. 0.5)
  TimeoutResource:
      type: integer
      default: 30
      format: int32
      description: Timeout for executions of a function. Value in Seconds
  IdleTimeoutResource:
      type: integer
      default: 30
      format: int32
      description: Hot functions idle timeout before container termination. Value in Seconds

parameters:
  cursor:
    name: cursor
    description: Cursor from previous response.next_cursor to begin results after, if any.
    required: false
    type: string
    in: query
  perPage:
    name: per_page
    description: Number of results to return, defaults to 30. Max of 100.
    required: false
    type: integer
    in: query
  AppName:
    name: app
    in: path
    description: App name.
    required: true
    type: string
  TriggerName:
    name: trigger
    in: path
    description: Trigger name.
    required: true
    type: string
  TriggerNameQuery:
    name: trigger
    in: query
    description: Trigger name.
    required: true
    type: string
  FnName:
    name: fn
    in: path
    description: Function Name.
    required: true
    type: string
  FnNameQuery:
    name: fn
    in: query
    description: Function Name.
    required: true
    type: string
  callID:
    name: call
    description: Call ID.
    required: true
    type: string
    in: path
  fromTimeQuery:
    name: from_time
    description: Unix timestamp in seconds, of call.created_at to begin the results at, default 0.
    required: false
    type: integer
    in: query
  toTimeQuery:
    name: to_time
    description: Unix timestamp in seconds, of call.created_at to end the results at, defaults to latest.
    required: false
    type: integer
    in: query